from datetime import datetime, timedelta

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    CallbackQueryHandler, ConversationHandler, MessageHandler,
    ContextTypes, filters
)

from bot.db import Session
from bot.models import Log
from bot.keyboards import home_kb

CHOOSE_PERIOD, ASK_DAYS = range(2)


def _build_period_kb():
    kb = [
        [InlineKeyboardButton("üóì –ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="week"),
         InlineKeyboardButton("üìÖ –ó–∞ –º–µ—Å—è—Ü", callback_data="month")],
        [InlineKeyboardButton("‚å® –£–∫–∞–∑–∞—Ç—å –∫–æ–ª-–≤–æ –¥–Ω–µ–π", callback_data="manual")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(kb)


async def start_report(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text("üìÑ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á—ë—Ç–∞:", reply_markup=_build_period_kb())
        return CHOOSE_PERIOD
    except Exception as e:
        print("‚ÄºÔ∏è –û–®–ò–ë–ö–ê –í start_report:", e)
        await update.effective_chat.send_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –æ—Ç—á—ë—Ç–∞.", reply_markup=home_kb())
        return ConversationHandler.END


async def choose_period(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        await update.callback_query.answer()
        choice = update.callback_query.data
        now = datetime.now()

        if choice == "week":
            start = now - timedelta(days=7)
            return await _generate_and_send_report(update, context, start, now)

        if choice == "month":
            start = now - timedelta(days=30)
            return await _generate_and_send_report(update, context, start, now)

        if choice == "manual":
            await update.callback_query.edit_message_text("‚å® –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –ø—Ä–æ—à–ª–æ–µ (1-365):")
            return ASK_DAYS

        return ConversationHandler.END

    except Exception as e:
        print("‚ÄºÔ∏è –û–®–ò–ë–ö–ê –í choose_period:", e)
        await update.effective_chat.send_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–µ—Ä–∏–æ–¥–∞.", reply_markup=home_kb())
        return ConversationHandler.END


async def ask_days(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        days = int(update.message.text.strip())
        if days <= 0 or days > 365:
            raise ValueError
        now = datetime.now()
        start = now - timedelta(days=days)
        return await _generate_and_send_report(update, context, start, now)

    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 365.")
        return ConversationHandler.END
    except Exception as e:
        print("‚ÄºÔ∏è –û–®–ò–ë–ö–ê –í ask_days:", e)
        await update.effective_chat.send_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –ø–µ—Ä–∏–æ–¥–∞.", reply_markup=home_kb())
        return ConversationHandler.END


async def _generate_and_send_report(update: Update, context: ContextTypes.DEFAULT_TYPE, start: datetime,
                                    end: datetime) -> int:
    try:
        session = Session()
        rows = session.query(Log).filter(Log.timestamp.between(start, end)).order_by(Log.timestamp).all()
        session.close()

        if not rows:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="üìÑ –ó–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=home_kb()
            )
            return ConversationHandler.END

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        header = f"{'–í—Ä–µ–º—è':<17} | {'–î–µ–π—Å—Ç–≤–∏–µ':<12} | {'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å':<10} | –î–µ—Ç–∞–ª–∏"
        line = "-" * 70
        out = ["<pre>" + header, line]

        for log in rows:
            out.append(
                f"{log.timestamp.strftime('%Y-%m-%d %H:%M')} | {log.action:<12} | {log.user_id:<10} | {log.info}")

        out.append("</pre>")
        chunks = ["\n".join(out[i:i + 40]) for i in range(0, len(out), 40)]
        for chunk in chunks:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=chunk,
                parse_mode="HTML"
            )

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üìÑ –ù–æ–≤—ã–π –æ—Ç—á—ë—Ç", callback_data="report")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
        ])
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=keyboard)

        return ConversationHandler.END

    except Exception as e:
        print("‚ÄºÔ∏è –û–®–ò–ë–ö–ê –í _generate_and_send_report:", e)
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞.",
            reply_markup=home_kb()
        )
        return ConversationHandler.END


def get_handler() -> ConversationHandler:
    return ConversationHandler(
        entry_points=[CallbackQueryHandler(start_report, pattern="^report$")],
        states={
            CHOOSE_PERIOD: [CallbackQueryHandler(choose_period, pattern="^(week|month|manual)$")],
            ASK_DAYS: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_days)],
        },
        fallbacks=[]
    )