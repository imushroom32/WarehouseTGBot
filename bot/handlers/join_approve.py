# bot/handlers/join_approve.py
from telegram import Update
from telegram.ext import CallbackQueryHandler, ContextTypes
from bot.db import Session
from bot.models import JoinRequest, User

async def handle_join(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query; await q.answer()
    action, tg_id = q.data.split(":", 1)

    session = Session()
    req = session.query(JoinRequest).filter_by(telegram_id=tg_id).one_or_none()

    if not req:
        await q.edit_message_text("‚õî –ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")
        session.close()
        return

    if action == "join_ok":
        session.add(User(telegram_id=tg_id, full_name=req.full_name, role="employee"))
        txt_admin = "‚úÖ –î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω."
        txt_user  = "üéâ –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ—Ç–∫—Ä—ã—Ç! –í–≤–µ–¥–∏—Ç–µ /start."
    else:
        txt_admin = "‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞."
        txt_user  = "üòî –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞—è–≤–∫—É."

    session.delete(req)
    session.commit()
    session.close()

    await q.edit_message_text(txt_admin)
    try:
        await ctx.bot.send_message(tg_id, txt_user)
    except Exception:
        pass

def get_handler():
    return CallbackQueryHandler(handle_join, pattern=r"^join_(ok|no):")
