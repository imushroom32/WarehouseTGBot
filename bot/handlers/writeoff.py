# bot/handlers/writeoff.py
"""
–°–ø–∏—Å–∞–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤.
‚Ä¢ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å–ø–∏—Å—ã–≤–∞–µ—Ç —Å–≤–æ–∏ —Ç–æ–≤–∞—Ä—ã.
‚Ä¢ –ú–µ–Ω–µ–¥–∂–µ—Ä –≤—ã–±–∏—Ä–∞–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ‚Üí —Ç–æ–≤–∞—Ä ‚Üí qty.
–ü–æ—Å–ª–µ —Å–ø–∏—Å–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É –ø—Ä–∏—Ö–æ–¥–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.

–í –º–æ–¥—É–ª–µ —É—á—Ç–µ–Ω—ã –Ω–µ–¥–∞–≤–Ω–∏–µ –ø—Ä–∞–≤–∫–∏:
  ‚Ä¢ –∑–∞—â–∏—Ç–∞ –æ—Ç BadRequest¬†¬´Message is not modified¬ª;
  ‚Ä¢ –æ—á–∏—Å—Ç–∫–∞ context.user_data –ø—Ä–∏ –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏;
  ‚Ä¢ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ DetachedInstanceError¬†(–¥–∞–Ω–Ω—ã–µ –±–µ—Ä—ë–º –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏);
  ‚Ä¢ ConversationHandler¬†per_message=True + allow_reentry=True;
  ‚Ä¢ fallback¬†‚Äî¬†–≤–æ–∑–≤—Ä–∞—Ç –∫ writeoff_start –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É.
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.error import BadRequest
from telegram.ext import (
    ContextTypes, ConversationHandler, CallbackQueryHandler, MessageHandler, filters
)
from sqlalchemy.orm import joinedload

from bot.config import MANAGER_TELEGRAM_IDS
from bot.db import Session
from bot.keyboards import home_kb
from bot.models import User, Product, Stock, Log

# ‚îÄ‚îÄ —Å–æ—Å—Ç–æ—è–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
CHOOSE_EMPLOYEE, CHOOSE_PRODUCT, ENTER_QTY, ENTER_REASON = range(4)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def writeoff_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: –æ–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—å–∏ –æ—Å—Ç–∞—Ç–∫–∏ –±—É–¥–µ–º —Å–ø–∏—Å—ã–≤–∞—Ç—å."""
    try:
        q = update.callback_query
        await q.answer()
        ctx.user_data.clear()

        session = Session()
        current = session.query(User).filter_by(telegram_id=str(q.from_user.id)).one()
        uid = current.id

        # ‚îÄ‚îÄ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å–ø–∏—Å—ã–≤–∞–µ—Ç —Å–≤–æ–∏ —Ç–æ–≤–∞—Ä—ã —Å—Ä–∞–∑—É ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        if current.role == "employee":
            ctx.user_data["target_uid"] = uid
            session.close()
            return await _show_products(q, ctx)

        # ‚îÄ‚îÄ –º–µ–Ω–µ–¥–∂–µ—Ä –≤—ã–±–∏—Ä–∞–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–ø–∏—Å–∞–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        employees = (
            session.query(User)
            .join(Stock)
            .filter(User.role == "employee", Stock.quantity > 0)
            .group_by(User.id)
            .order_by(User.full_name)
            .all()
        )
        has_unassigned = session.query(Stock).filter(
            Stock.user_id.is_(None), Stock.quantity > 0
        ).count() > 0
        session.close()

        if not employees and not has_unassigned:
            await q.edit_message_text("‚ùó –ù–µ—Ç –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è.", reply_markup=home_kb())
            return ConversationHandler.END

        kb = [[InlineKeyboardButton(e.full_name, callback_data=str(e.id))] for e in employees]
        if has_unassigned:
            kb.append([InlineKeyboardButton("üì¶ –°–∫–ª–∞–¥ (–±–µ–∑ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ)", callback_data="unassigned")])

        try:
            await q.edit_message_text(
                "üë§ –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–ø–∏—Å–∞–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(kb)
            )
        except BadRequest as e:
            if "Message is not modified" not in str(e):
                raise
        return CHOOSE_EMPLOYEE

    except Exception as e:
        print("‚ÄºÔ∏è –û–®–ò–ë–ö–ê –í writeoff_start:", e)
        await update.effective_chat.send_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞.", reply_markup=home_kb())
        return ConversationHandler.END

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def select_employee(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        q = update.callback_query
        await q.answer()

        ctx.user_data["target_uid"] = None if q.data == "unassigned" else int(q.data)
        return await _show_products(q, ctx)

    except Exception as e:
        print("‚ÄºÔ∏è –û–®–ò–ë–ö–ê –í select_employee:", e)
        await update.effective_chat.send_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.", reply_markup=home_kb())
        return ConversationHandler.END

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def _show_products(query, ctx) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫ —Å–ø–∏—Å–∞–Ω–∏—é —É –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞."""
    try:
        uid = ctx.user_data["target_uid"]
        session = Session()
        stocks = (
            session.query(Stock)
            .options(joinedload(Stock.product))
            .join(Product, Stock.product_id == Product.id)
            .filter((Stock.user_id == uid) if uid is not None else Stock.user_id.is_(None), Stock.quantity > 0)
            .order_by(Product.name)
            .all()
        )

        if not stocks:
            session.close()
            await query.edit_message_text("‚ùó –ù–µ—Ç –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è.", reply_markup=home_kb())
            return ConversationHandler.END

        kb = [[InlineKeyboardButton(f"{s.product.name}: {s.quantity}‚ÄØ—à—Ç.", callback_data=str(s.id))] for s in stocks]
        session.close()

        try:
            await query.edit_message_text(
                "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=InlineKeyboardMarkup(kb + list(home_kb().inline_keyboard))
            )
        except BadRequest as e:
            if "Message is not modified" not in str(e):
                raise
        return CHOOSE_PRODUCT

    except Exception as e:
        print("‚ÄºÔ∏è –û–®–ò–ë–ö–ê –í _show_products:", e)
        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤.", reply_markup=home_kb())
        return ConversationHandler.END

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def select_product(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        q = update.callback_query
        await q.answer()

        stock_id = int(q.data)
        ctx.user_data["stock_id"] = stock_id

        session = Session()
        stock = session.query(Stock).get(stock_id)
        ctx.user_data["available_qty"] = stock.quantity
        session.close()

        await q.edit_message_text(f"üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–¥–æ—Å—Ç—É–ø–Ω–æ: {stock.quantity}‚ÄØ—à—Ç.):")
        return ENTER_QTY

    except Exception as e:
        print("‚ÄºÔ∏è –û–®–ò–ë–ö–ê –í select_product:", e)
        await update.effective_chat.send_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–æ–≤–∞—Ä–∞.", reply_markup=home_kb())
        return ConversationHandler.END

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def enter_qty(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        qty = int(update.message.text.strip())
        if qty <= 0 or qty > ctx.user_data["available_qty"]:
            raise ValueError
        ctx.user_data["writeoff_qty"] = qty
        await update.message.reply_text("üìù –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —Å–ø–∏—Å–∞–Ω–∏—è:")
        return ENTER_REASON

    except Exception:
        await update.message.reply_text(
            f"‚ùó –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç‚ÄØ1 –¥–æ‚ÄØ{ctx.user_data.get('available_qty', '?')}"
        )
        return ENTER_QTY

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def enter_reason(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        reason = update.message.text
        qty = ctx.user_data["writeoff_qty"]
        stock_id = ctx.user_data["stock_id"]

        session = Session()
        stock = session.query(Stock).get(stock_id)
        product_name = stock.product.name  # –±–µ—Ä—ë–º –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏
        user_fullname = stock.user.full_name if stock.user else "–°–∫–ª–∞–¥"

        stock.quantity -= qty
        if stock.quantity == 0:
            session.delete(stock)

        session.add(Log(
            action="writeoff",
            user_id=str(update.effective_user.id),
            info=f"–°–ø–∏—Å–∞–Ω–æ {qty} —à—Ç. {product_name} ({user_fullname}). –ü—Ä–∏—á–∏–Ω–∞: {reason}"
        ))
        session.commit()
        session.close()

        await update.message.reply_text(f"‚úÖ –°–ø–∏—Å–∞–Ω–æ {qty}‚ÄØ—à—Ç. ({product_name}).", reply_markup=home_kb())

        # —É–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        for mgr_id in MANAGER_TELEGRAM_IDS:
            try:
                await update.get_bot().send_message(
                    mgr_id,
                    f"üîî <b>{user_fullname}</b> —Å–ø–∏—Å–∞–ª {qty}‚ÄØ—à—Ç. <i>{product_name}</i>.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}",
                    parse_mode="HTML"
                )
            except Exception:
                pass
        return ConversationHandler.END

    except Exception as e:
        print("‚ÄºÔ∏è –û–®–ò–ë–ö–ê –í enter_reason:", e)
        await update.effective_chat.send_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏.", reply_markup=home_kb())
        return ConversationHandler.END

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def get_handler() -> ConversationHandler:
    return ConversationHandler(
        entry_points=[CallbackQueryHandler(writeoff_start, pattern="^write_off$")],
        states={
            CHOOSE_EMPLOYEE: [CallbackQueryHandler(select_employee, pattern=r"^\d+$|^unassigned$")],
            CHOOSE_PRODUCT:  [CallbackQueryHandler(select_product,  pattern=r"^\d+$")],
            ENTER_QTY:       [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_qty)],
            ENTER_REASON:    [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_reason)],
        },
        fallbacks=[CallbackQueryHandler(writeoff_start, pattern="^write_off$")],
        per_message=True,
        allow_reentry=True,
    )
