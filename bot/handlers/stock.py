"""
–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–∞.
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)

from bot.db import Session
from bot.keyboards import home_kb
from bot.models import Product, Stock, Log

# —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
SELECT_PRODUCT, ENTER_QTY = range(2)


async def add_stock_start(
        update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """
    –®–∞–≥ 1: –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.
    """
    query = update.callback_query
    await query.answer()
    session = Session()
    products = session.query(Product).order_by(Product.name).all()
    session.close()

    if not products:
        await query.edit_message_text("‚ùó –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤. –°–ø–µ—Ä–≤–∞ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä.", reply_markup=home_kb())
        return ConversationHandler.END

    keyboard = [[InlineKeyboardButton(p.name, callback_data=str(p.id))] for p in products]
    await query.edit_message_text(
        "‚ûï –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return SELECT_PRODUCT


async def select_product(
        update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """
    –®–∞–≥ 2: –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.
    """
    query = update.callback_query
    await query.answer()

    if not query.data.isdigit():  # ‚Üê –∑–∞—â–∏—Ç–∞
        # –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —Å–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        return SELECT_PRODUCT

    pid = int(query.data)
    context.user_data["pid"] = pid

    await query.edit_message_text("‚ûï –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:")
    return ENTER_QTY


async def enter_qty(
        update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """
    –®–∞–≥ 3: –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç –∑–∞–ø–∏—Å—å Stock.
    """
    text = update.message.text
    if not text.isdigit() or int(text) <= 0:
        await update.message.reply_text("‚ùó –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!")
        return ENTER_QTY

    qty = int(text)
    pid = context.user_data['pid']
    session = Session()
    stock = (
        session.query(Stock)
        .filter_by(product_id=pid, user_id=None)  # ‚Üê –∫–ª—é—á–µ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        .first()
    )

    if stock:
        stock.quantity += qty
    else:
        stock = Stock(product_id=pid, quantity=qty)  # user_id –æ—Å—Ç–∞—ë—Ç—Å—è NULL
        session.add(stock)

    session.commit()

    product = session.get(Product, pid)
    await update.message.reply_text(
        f"‚úÖ {product.name}: +{qty}—à—Ç. –ò—Ç–æ–≥–æ: {stock.quantity}—à—Ç."
    )

    keyboard = [
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)

    log = Log(
        action="add_stock",
        user_id=str(update.effective_user.id),
        info=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–æ: {product.name} +{qty} —à—Ç. –ò—Ç–æ–≥–æ: {stock.quantity} —à—Ç."
    )
    session.add(log)
    session.commit()
    session.close()
    return ConversationHandler.END


def get_handler() -> ConversationHandler:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ConversationHandler –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤.
    """
    return ConversationHandler(
        entry_points=[CallbackQueryHandler(add_stock_start, pattern="^add_stock$")],
        states={
            # –ø—Ä–∏–Ω–∏–º–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ callback_data –∏–∑ —Ü–∏—Ñ—Ä
            SELECT_PRODUCT: [CallbackQueryHandler(select_product, pattern=r"^\d+$")],
            ENTER_QTY: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_qty)],
        },
        fallbacks=[]
    )
