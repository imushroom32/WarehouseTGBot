# bot/handlers/stock.py
"""
–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–∞.
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)
from telegram.error import BadRequest  # ‚Üê –¥–æ–±–∞–≤–∏–ª–∏

from bot.db import Session
from bot.keyboards import home_kb
from bot.models import Product, Stock, Log

# ‚îÄ‚îÄ —Å–æ—Å—Ç–æ—è–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
SELECT_PRODUCT, ENTER_QTY = range(2)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def add_stock_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°—Ç–∞—Ä—Ç: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è."""
    try:
        query = update.callback_query
        await query.answer()
        context.user_data.clear()

        # —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        session = Session()
        products = session.query(Product).order_by(Product.name).all()
        session.close()

        if not products:
            await query.edit_message_text(
                "‚ùó –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤. –°–ø–µ—Ä–≤–∞ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä.", reply_markup=home_kb()
            )
            return ConversationHandler.END

        kb = [[InlineKeyboardButton(p.name, callback_data=str(p.id))] for p in products]
        try:
            # –ø—Ä–æ–±—É–µ–º –∏–∑–º–µ–Ω–∏—Ç—å –∏ —Ç–µ–∫—Å—Ç, –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await query.edit_message_text(
                "‚ûï –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
                reply_markup=InlineKeyboardMarkup(kb + list(home_kb().inline_keyboard)),
            )
        except BadRequest as e:
            # –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Ç–æ—Ç –∂–µ, –º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É ‚Äì –∏–∑–±–∞–≤–ª—è–µ–º—Å—è –æ—Ç ¬´Message is not modified¬ª
            if "Message is not modified" in str(e):
                await query.edit_message_reply_markup(
                    reply_markup=InlineKeyboardMarkup(kb + list(home_kb().inline_keyboard))
                )
            else:
                raise

        return SELECT_PRODUCT

    except Exception as e:
        print("‚ÄºÔ∏è –û–®–ò–ë–ö–ê –í add_stock_start:", e)
        await update.effective_chat.send_message(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é.", reply_markup=home_kb()
        )
        return ConversationHandler.END


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def select_product(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–æ–≤–∞—Ä–∞ –∏ –ø—Ä–æ—Å–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ."""
    try:
        query = update.callback_query
        await query.answer()

        context.user_data.clear()
        context.user_data["product_id"] = int(query.data)

        await query.edit_message_text("‚ûï –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:")
        return ENTER_QTY

    except Exception as e:
        print("‚ÄºÔ∏è –û–®–ò–ë–ö–ê –í select_product:", e)
        await update.effective_chat.send_message(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–æ–≤–∞—Ä–∞.", reply_markup=home_kb()
        )
        return ConversationHandler.END


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def enter_qty(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–§–∏–∫—Å–∏—Ä—É–µ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ."""
    try:
        text = (update.message.text or "").strip()
        qty = int(text)
        if qty <= 0:
            raise ValueError
    except (ValueError, AttributeError):
        await update.message.reply_text("‚ùó –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!")
        return ENTER_QTY

    pid = context.user_data["product_id"]

    session = Session()
    stock = session.query(Stock).filter_by(product_id=pid, user_id=None).first()

    if stock:
        stock.quantity += qty
        final_qty = stock.quantity
    else:
        stock = Stock(product_id=pid, quantity=qty)
        session.add(stock)
        final_qty = qty

    product = session.get(Product, pid)
    product_name = product.name  # –∫–µ—à–∏—Ä—É–µ–º –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏

    session.add(
        Log(
            action="add_stock",
            user_id=str(update.effective_user.id),
            info=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–æ: {product_name} +{qty} —à—Ç. –ò—Ç–æ–≥–æ: {final_qty} —à—Ç.",
        )
    )
    session.commit()
    session.close()

    reply_kb = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton("‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å –µ—â—ë", callback_data="add_stock"),
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"),
            ]
        ]
    )

    await update.message.reply_text(
        f"‚úÖ {product_name}: +{qty} —à—Ç. –ò—Ç–æ–≥–æ: {final_qty} —à—Ç.", reply_markup=reply_kb
    )
    return ConversationHandler.END


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã—Ö–æ–¥ –∏–∑ –¥–∏–∞–ª–æ–≥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    from bot.handlers.start import start as start_handler  # –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–æ–≤

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥ –∏ –ø–µ—Ä–µ–¥–∞—ë–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    await start_handler(update, context)
    return ConversationHandler.END


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def get_handler() -> ConversationHandler:
    return ConversationHandler(
        entry_points=[CallbackQueryHandler(add_stock_start, pattern="^add_stock$")],
        states={
            SELECT_PRODUCT: [CallbackQueryHandler(select_product, pattern=r"^\d+$")],
            ENTER_QTY: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_qty)],
        },
        fallbacks=[CallbackQueryHandler(back_to_menu, pattern="^main_menu$")],
        allow_reentry=True,
    )
