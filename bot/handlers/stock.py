from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)

from bot.db import Session
from bot.keyboards import home_kb
from bot.models import Product, Stock, Log
from datetime import datetime

SELECT_PRODUCT, ENTER_QTY = range(2)


async def add_stock_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        query = update.callback_query
        await query.answer()
        session = Session()
        products = session.query(Product).order_by(Product.name).all()
        session.close()

        if not products:
            await query.edit_message_text("‚ùó –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤. –°–ø–µ—Ä–≤–∞ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä.", reply_markup=home_kb())
            return ConversationHandler.END

        keyboard = [[InlineKeyboardButton(p.name, callback_data=str(p.id))] for p in products]
        await query.edit_message_text(
            "‚ûï –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return SELECT_PRODUCT

    except Exception as e:
        print("‚ÄºÔ∏è –û–®–ò–ë–ö–ê –í add_stock_start:", e)
        await update.effective_chat.send_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é.", reply_markup=home_kb())
        return ConversationHandler.END


async def select_product(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        query = update.callback_query
        await query.answer()

        if not query.data.isdigit():
            return SELECT_PRODUCT

        pid = int(query.data)
        context.user_data["pid"] = pid

        await query.edit_message_text("‚ûï –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:")
        return ENTER_QTY

    except Exception as e:
        print("‚ÄºÔ∏è –û–®–ò–ë–ö–ê –í select_product:", e)
        await update.effective_chat.send_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–æ–≤–∞—Ä–∞.", reply_markup=home_kb())
        return ConversationHandler.END


async def enter_qty(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        if not update.message:
            await update.effective_chat.send_message("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return ENTER_QTY

        text = update.message.text.strip()
        try:
            qty = int(text)
            if qty <= 0:
                raise ValueError
        except ValueError:
            await update.message.reply_text("‚ùó –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!")
            return ENTER_QTY

        pid = context.user_data['pid']
        session = Session()
        stock = session.query(Stock).filter_by(product_id=pid, user_id=None).first()

        if stock:
            stock.quantity += qty
            final_qty = stock.quantity
        else:
            stock = Stock(product_id=pid, quantity=qty)
            session.add(stock)
            final_qty = qty

        product = session.get(Product, pid)
        product_name = product.name

        log = Log(
            action="add_stock",
            user_id=str(update.effective_user.id),
            info=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–æ: {product_name} +{qty} —à—Ç. –ò—Ç–æ–≥–æ: {final_qty} —à—Ç."
        )
        session.add(log)

        session.commit()
        session.close()

        try:
            await update.message.reply_text(
                f"‚úÖ {product_name}: +{qty}—à—Ç. –ò—Ç–æ–≥–æ: {final_qty}—à—Ç.",
                reply_markup=InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton("‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å –µ—â—ë", callback_data="add_stock"),
                        InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                    ]
                ])
            )
        except Exception as e:
            print("‚ÄºÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:", e)

        return ConversationHandler.END

    except Exception as e:
        print("‚ÄºÔ∏è –û–®–ò–ë–ö–ê –í enter_qty (stock.py):", e)
        return ConversationHandler.END


def get_handler() -> ConversationHandler:
    return ConversationHandler(
        entry_points=[CallbackQueryHandler(add_stock_start, pattern="^add_stock$")],
        states={
            SELECT_PRODUCT: [CallbackQueryHandler(select_product, pattern=r"^\d+$")],
            ENTER_QTY: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_qty)],
        },
        fallbacks=[]
    )
