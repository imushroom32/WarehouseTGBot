"""
–•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)

from bot.db import Session
from bot.keyboards import home_kb
from bot.models import Product, Log

# —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
ENTER_NAME = 0


async def add_product_start(
        update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """
    –®–∞–≥ 1: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.
    """
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("üÜï –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    return ENTER_NAME


async def add_product_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    name = update.message.text.strip()
    session = Session()

    try:
        product = Product(name=name)
        session.add(product)

        log = Log(
            action="add_product",
            user_id=str(update.effective_user.id),
            info=f"–î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä: {name}"
        )
        session.add(log)

        session.commit()
        await update.message.reply_text(f"‚úÖ –¢–æ–≤–∞—Ä ¬´{name}¬ª –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=home_kb())

        # ‚îÄ‚îÄ –Ω–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        keyboard = [
            [
                InlineKeyboardButton("üÜï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", callback_data="add_product"),
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"),
            ]
        ]
        await update.message.reply_text(
            "–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=InlineKeyboardMarkup(keyboard)
        )

    except Exception as e:
        session.rollback()
        await update.message.reply_text(f"‚ùó –û—à–∏–±–∫–∞: {e}")
    finally:
        session.close()
    return ConversationHandler.END


def get_handler() -> ConversationHandler:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.
    """
    return ConversationHandler(
        entry_points=[CallbackQueryHandler(add_product_start, pattern="^add_product$")],
        states={ENTER_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_product_name)]},
        fallbacks=[]
    )
